{"version":3,"file":"static/js/351.7917f798.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","redux/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.js","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"text\":\"Contact_text__Wq-3f\",\"btn\":\"Contact_btn__JzanX\",\"checkbox\":\"Contact_checkbox__witdE\"};","// import PropTypes from 'prop-types';\n// import { useDispatch } from 'react-redux';\n// import { MdClose } from 'react-icons/md';\n// import { deleteContact } from '../../redux/operations';\n// import css from './Contact.module.css';\n\n// export const Contact = ({ contact }) => {\n//   const dispatch = useDispatch();\n\n//   const handleDelete = () => dispatch(deleteContact(contact.id));\n\n//   return (\n//     <div className={css.wrapper}>\n//       <p className={css.text}>\n//         {contact.name}:&nbsp;&nbsp;&nbsp;&nbsp; {contact.phone}\n//       </p>\n//       <button className={css.btn} onClick={handleDelete}>\n//         <MdClose size={24} />\n//       </button>\n//     </div>\n//   );\n// };\n\n// Contact.propTypes = {\n//   contact: PropTypes.shape({\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     phone: PropTypes.string.isRequired,\n//   }).isRequired,\n// };\n\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { MdClose } from 'react-icons/md';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport css from './Contact.module.css';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.text}>\n        {contact.name}:&nbsp;&nbsp;&nbsp;&nbsp; {contact.phone}\n      </p>\n      <button className={css.btn} onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","export const getContacts = state => state.contacts;\nexport const getStatusFilter = state => state.filters.status;\nexport const getSearchQuery = state => state.filters.searchQuery;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"listItem\":\"ContactList_listItem__SptUx\",\"title\":\"ContactList_title__gpugJ\"};","// src/components/ContactList/ContactList.js\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { getContacts, getSearchQuery } from '../../redux/selectors';\nimport css from './ContactList.module.css';\n\nconst getVisibleContacts = (contacts, searchQuery) => {\n  if (!searchQuery) {\n    return contacts;\n  }\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n};\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { items: contacts, isLoading, error } = useSelector(getContacts);\n  const searchQuery = useSelector(getSearchQuery);\n  const visibleContacts = getVisibleContacts(contacts, searchQuery);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h2 className={css.title}>List of Contacts</h2>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      <ul className={css.list}>\n        {visibleContacts.map(contact => (\n          <li className={css.listItem} key={contact.id}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// import { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Contact } from '../Contact/Contact';\n// import { fetchContacts } from '../../redux/contacts/operations';\n// import {\n//   getContacts,\n//   getStatusFilter,\n//   getSearchQuery,\n// } from '../../redux/contacts/selectors';\n// import { statusFilters } from '../../redux/constants'; // Ensure this import\n// import css from './ContactList.module.css';\n\n// const getVisibleContacts = (contacts, statusFilter, searchQuery) => {\n//   let filteredContacts = contacts;\n\n//   if (searchQuery) {\n//     filteredContacts = filteredContacts.filter(contact =>\n//       contact.name.toLowerCase().includes(searchQuery.toLowerCase())\n//     );\n//   }\n\n//   switch (statusFilter) {\n//     case statusFilters.active:\n//       return filteredContacts.filter(contact => !contact.completed);\n//     case statusFilters.completed:\n//       return filteredContacts.filter(contact => contact.completed);\n//     default:\n//       return filteredContacts;\n//   }\n// };\n\n// export const ContactList = () => {\n//   const dispatch = useDispatch();\n//   const { items: contacts, isLoading, error } = useSelector(getContacts);\n//   const statusFilter = useSelector(getStatusFilter);\n//   const searchQuery = useSelector(getSearchQuery);\n//   const visibleContacts = getVisibleContacts(\n//     contacts,\n//     statusFilter,\n//     searchQuery\n//   );\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   return (\n//     <div>\n//       <h2 className={css.title}>List of Contacts</h2>\n//       {isLoading && <p>Loading...</p>}\n//       {error && <p>Error: {error}</p>}\n//       <ul className={css.list}>\n//         {visibleContacts.map(contact => (\n//           <li className={css.listItem} key={contact.id}>\n//             <Contact contact={contact} />\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n//===================================\n// import { useSelector } from 'react-redux';\n// import { Contact } from '../Contact/Contact';\n// import { selectAllContacts } from '../../redux/contacts/selectors';\n// import css from './ContactList.module.css';\n\n// export const ContactList = () => {\n//   const contacts = useSelector(selectAllContacts);\n\n//   return (\n//     <ul className={css.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <Contact id={id} name={name} number={number} />\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n//=====================================\n\n// import { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Contact } from '../Contact/Contact';\n// import { fetchContacts } from '../../redux/operations';\n// import {\n//   getContacts,\n//   getStatusFilter,\n//   getSearchQuery,\n// } from '../../redux/selectors';\n// import { statusFilters } from '../../redux/constants';\n// import css from './ContactList.module.css';\n\n// const getVisibleContacts = (contacts, statusFilter, searchQuery) => {\n//   let filteredContacts = contacts;\n\n//   if (searchQuery) {\n//     filteredContacts = filteredContacts.filter(contact =>\n//       contact.name.toLowerCase().includes(searchQuery.toLowerCase())\n//     );\n//   }\n\n//   switch (statusFilter) {\n//     case statusFilters.active:\n//       return filteredContacts.filter(contact => !contact.completed);\n//     case statusFilters.completed:\n//       return filteredContacts.filter(contact => contact.completed);\n//     default:\n//       return filteredContacts;\n//   }\n// };\n\n// export const ContactList = () => {\n//   const dispatch = useDispatch();\n//   const { items: contacts, isLoading, error } = useSelector(getContacts);\n//   const statusFilter = useSelector(getStatusFilter);\n//   const searchQuery = useSelector(getSearchQuery);\n//   const visibleContacts = getVisibleContacts(\n//     contacts,\n//     statusFilter,\n//     searchQuery\n//   );\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   return (\n//     <div>\n//       <h2 className={css.title}>List of Contacts</h2>\n//       {isLoading && <p>Loading...</p>}\n//       {error && <p>Error: {error}</p>}\n//       <ul className={css.list}>\n//         {visibleContacts.map(contact => (\n//           <li className={css.listItem} key={contact.id}>\n//             <Contact contact={contact} />\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"isSelected\":\"Button_isSelected__-6JYv\"};","import PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport css from './Button.module.css';\n\nexport const Button = ({\n  selected = false,\n  type = 'button',\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected,\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  selected: PropTypes.bool,\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n  children: PropTypes.node.isRequired,\n};\n","// src/redux/contacts/selectors.js\nexport const getContacts = state => state.contacts;\nexport const getStatusFilter = state => state.filters.status;\nexport const getSearchQuery = state => state.filters.searchQuery;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"field\":\"ContactForm_field__DAXEv\",\"title\":\"ContactForm_title__jZguf\"};","// import { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Button } from '../Button/Button';\n// import { addContact } from '../../redux/operations';\n// import { getContacts } from '../../redux/selectors';\n// import css from './ContactForm.module.css';\n\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(getContacts).items;\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     localStorage.setItem('contacts', JSON.stringify(contacts));\n//   }, [contacts]);\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     const form = event.target;\n//     const name = form.elements.name.value;\n//     const phone = form.elements.phone.value;\n\n//     const existingContact = contacts.find(contact => contact.name === name);\n//     if (existingContact) {\n//       window.alert('Contact with this name already exists.');\n//       return;\n//     }\n\n//     dispatch(addContact({ name, phone }));\n//     form.reset();\n//     setError('');\n//   };\n\n//   return (\n//     <div>\n//       <h2 className={css.title}>Add Contacts</h2>\n//       <form className={css.form} onSubmit={handleSubmit}>\n//         {error && <p className={css.error}>{error}</p>}\n//         <input\n//           className={css.field}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n//           placeholder=\"Enter contact name...\"\n//           required\n//         />\n//         <input\n//           className={css.field}\n//           type=\"tel\"\n//           name=\"phone\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           placeholder=\"Enter phone number...\"\n//           required\n//         />\n//         <Button type=\"submit\">Add contact</Button>\n//       </form>\n//     </div>\n//   );\n// };\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button } from '../Button/Button';\nimport { addContact } from '../../redux/contacts/operations';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts).items;\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const name = form.elements.name.value;\n    const phone = form.elements.phone.value;\n\n    const existingContact = contacts.find(contact => contact.name === name);\n    if (existingContact) {\n      window.alert('Contact with this name already exists.');\n      return;\n    }\n\n    dispatch(addContact({ name, phone }));\n    form.reset();\n    setError('');\n  };\n\n  return (\n    <div>\n      <h2 className={css.title}>Add Contacts</h2>\n      <form className={css.form} onSubmit={handleSubmit}>\n        {error && <p className={css.error}>{error}</p>}\n        <input\n          className={css.field}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n          placeholder=\"Enter contact name...\"\n          required\n        />\n        <input\n          className={css.field}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"Enter phone number...\"\n          required\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchBar_wrapper__KGK67\",\"title\":\"SearchBar_title__l+gon\",\"form\":\"SearchBar_form__gW7Gj\",\"field\":\"SearchBar_field__Aqs1-\"};","import { useDispatch } from 'react-redux';\nimport { setSearchQuery } from '../../redux/filtersSlice';\nimport css from './SearchBar.module.css';\n\nexport const SearchBar = () => {\n  const dispatch = useDispatch();\n\n  const handleSearch = event => {\n    dispatch(setSearchQuery(event.target.value));\n  };\n\n  return (\n    <div>\n      <h2 className={css.title}>Search Contact</h2>\n      <div className={css.wrapper}>\n        <input\n          className={css.field}\n          type=\"text\"\n          placeholder=\"Search contacts...\"\n          onChange={handleSearch}\n        />\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__TJkHA\",\"title\":\"Contacts_title__HJPSk\"};","// src/pages/Contacts.js\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { SearchBar } from '../components/SearchBar/SearchBar';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { getContacts } from '../redux/contacts/selectors';\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.container}>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <h1 className={css.title}>Phone Book</h1>\n      <SearchBar />\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {error && <p>Error: {error}</p>}\n      <ContactList contacts={items} />\n    </div>\n  );\n}\n"],"names":["Contact","_ref","contact","dispatch","useDispatch","_jsxs","className","css","children","name","phone","_jsx","onClick","deleteContact","id","MdClose","size","getContacts","state","contacts","getSearchQuery","filters","searchQuery","ContactList","_useSelector","useSelector","items","isLoading","error","visibleContacts","filter","toLowerCase","includes","getVisibleContacts","useEffect","fetchContacts","map","Button","_ref$selected","selected","_ref$type","type","otherProps","_objectWithoutProperties","_excluded","_objectSpread","clsx","_defineProperty","ContactForm","_useState","useState","_useState2","_slicedToArray","setError","localStorage","setItem","JSON","stringify","onSubmit","event","preventDefault","form","target","elements","value","find","window","alert","addContact","reset","pattern","title","placeholder","required","SearchBar","onChange","setSearchQuery","Contacts","Helmet"],"sourceRoot":""}